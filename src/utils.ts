/**
 * Return a generator that iterates the numbers from start to finish.
 *
 * @param start     The index to start at (inclusive)
 * @param end       The index to end at (not inclusive)
 * @param step      The number of indices to skip between each iteration.
 */
export function* range(start: number, end: number, step: number = 1) {
  for (let i = start; i < end; i += step) {
    yield i;
  }
}

/**
 * Return a random member of the given array.
 *
 * @param array     An array of any type.
 * @returns         A random member of array.
 */
export function choice<T>(array: T[]): T {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

/**
 * Take a string in 'weak' betacode format (case-sensitive, diacritics in
 * any order) and return a string in precomposed unicode Greek format.
 *
 * @param text    A text in 'weak' betacode formatting.
 * @returns       A text in precomposed unicode Greek formatting.
 */
export function convertWeakBetacodeToGreek(text: string): string {
  // The table was derived procedurally from a set of precomposed Greek
  // characters. First, they were decomposed into their combining forms,
  // then those combining diacritics were mapped to their replacement
  // ASCII symbols, which were then permuted for every possible ordering.
  // Finally, the table was sorted by longest for maximal munching.
  let greekConversions = [
    ['a|)\\', 'ᾂ'],
    ['a|\\)', 'ᾂ'],
    ['a)|\\', 'ᾂ'],
    ['a)\\|', 'ᾂ'],
    ['a\\|)', 'ᾂ'],
    ['a\\)|', 'ᾂ'],
    ['a|(\\', 'ᾃ'],
    ['a|\\(', 'ᾃ'],
    ['a(|\\', 'ᾃ'],
    ['a(\\|', 'ᾃ'],
    ['a\\|(', 'ᾃ'],
    ['a\\(|', 'ᾃ'],
    ['a|)/', 'ᾄ'],
    ['a|/)', 'ᾄ'],
    ['a)|/', 'ᾄ'],
    ['a)/|', 'ᾄ'],
    ['a/|)', 'ᾄ'],
    ['a/)|', 'ᾄ'],
    ['a|(/', 'ᾅ'],
    ['a|/(', 'ᾅ'],
    ['a(|/', 'ᾅ'],
    ['a(/|', 'ᾅ'],
    ['a/|(', 'ᾅ'],
    ['a/(|', 'ᾅ'],
    ['a|)=', 'ᾆ'],
    ['a|=)', 'ᾆ'],
    ['a)|=', 'ᾆ'],
    ['a)=|', 'ᾆ'],
    ['a=|)', 'ᾆ'],
    ['a=)|', 'ᾆ'],
    ['a|(=', 'ᾇ'],
    ['a|=(', 'ᾇ'],
    ['a(|=', 'ᾇ'],
    ['a(=|', 'ᾇ'],
    ['a=|(', 'ᾇ'],
    ['a=(|', 'ᾇ'],
    ['A|)\\', 'ᾊ'],
    ['A|\\)', 'ᾊ'],
    ['A)|\\', 'ᾊ'],
    ['A)\\|', 'ᾊ'],
    ['A\\|)', 'ᾊ'],
    ['A\\)|', 'ᾊ'],
    ['A|(\\', 'ᾋ'],
    ['A|\\(', 'ᾋ'],
    ['A(|\\', 'ᾋ'],
    ['A(\\|', 'ᾋ'],
    ['A\\|(', 'ᾋ'],
    ['A\\(|', 'ᾋ'],
    ['A|)/', 'ᾌ'],
    ['A|/)', 'ᾌ'],
    ['A)|/', 'ᾌ'],
    ['A)/|', 'ᾌ'],
    ['A/|)', 'ᾌ'],
    ['A/)|', 'ᾌ'],
    ['A|(/', 'ᾍ'],
    ['A|/(', 'ᾍ'],
    ['A(|/', 'ᾍ'],
    ['A(/|', 'ᾍ'],
    ['A/|(', 'ᾍ'],
    ['A/(|', 'ᾍ'],
    ['A|)=', 'ᾎ'],
    ['A|=)', 'ᾎ'],
    ['A)|=', 'ᾎ'],
    ['A)=|', 'ᾎ'],
    ['A=|)', 'ᾎ'],
    ['A=)|', 'ᾎ'],
    ['A|(=', 'ᾏ'],
    ['A|=(', 'ᾏ'],
    ['A(|=', 'ᾏ'],
    ['A(=|', 'ᾏ'],
    ['A=|(', 'ᾏ'],
    ['A=(|', 'ᾏ'],
    ['h|)\\', 'ᾒ'],
    ['h|\\)', 'ᾒ'],
    ['h)|\\', 'ᾒ'],
    ['h)\\|', 'ᾒ'],
    ['h\\|)', 'ᾒ'],
    ['h\\)|', 'ᾒ'],
    ['h|(\\', 'ᾓ'],
    ['h|\\(', 'ᾓ'],
    ['h(|\\', 'ᾓ'],
    ['h(\\|', 'ᾓ'],
    ['h\\|(', 'ᾓ'],
    ['h\\(|', 'ᾓ'],
    ['h|)/', 'ᾔ'],
    ['h|/)', 'ᾔ'],
    ['h)|/', 'ᾔ'],
    ['h)/|', 'ᾔ'],
    ['h/|)', 'ᾔ'],
    ['h/)|', 'ᾔ'],
    ['h|(/', 'ᾕ'],
    ['h|/(', 'ᾕ'],
    ['h(|/', 'ᾕ'],
    ['h(/|', 'ᾕ'],
    ['h/|(', 'ᾕ'],
    ['h/(|', 'ᾕ'],
    ['h|)=', 'ᾖ'],
    ['h|=)', 'ᾖ'],
    ['h)|=', 'ᾖ'],
    ['h)=|', 'ᾖ'],
    ['h=|)', 'ᾖ'],
    ['h=)|', 'ᾖ'],
    ['h|(=', 'ᾗ'],
    ['h|=(', 'ᾗ'],
    ['h(|=', 'ᾗ'],
    ['h(=|', 'ᾗ'],
    ['h=|(', 'ᾗ'],
    ['h=(|', 'ᾗ'],
    ['H|)\\', 'ᾚ'],
    ['H|\\)', 'ᾚ'],
    ['H)|\\', 'ᾚ'],
    ['H)\\|', 'ᾚ'],
    ['H\\|)', 'ᾚ'],
    ['H\\)|', 'ᾚ'],
    ['H|(\\', 'ᾛ'],
    ['H|\\(', 'ᾛ'],
    ['H(|\\', 'ᾛ'],
    ['H(\\|', 'ᾛ'],
    ['H\\|(', 'ᾛ'],
    ['H\\(|', 'ᾛ'],
    ['H|)/', 'ᾜ'],
    ['H|/)', 'ᾜ'],
    ['H)|/', 'ᾜ'],
    ['H)/|', 'ᾜ'],
    ['H/|)', 'ᾜ'],
    ['H/)|', 'ᾜ'],
    ['H|(/', 'ᾝ'],
    ['H|/(', 'ᾝ'],
    ['H(|/', 'ᾝ'],
    ['H(/|', 'ᾝ'],
    ['H/|(', 'ᾝ'],
    ['H/(|', 'ᾝ'],
    ['H|)=', 'ᾞ'],
    ['H|=)', 'ᾞ'],
    ['H)|=', 'ᾞ'],
    ['H)=|', 'ᾞ'],
    ['H=|)', 'ᾞ'],
    ['H=)|', 'ᾞ'],
    ['H|(=', 'ᾟ'],
    ['H|=(', 'ᾟ'],
    ['H(|=', 'ᾟ'],
    ['H(=|', 'ᾟ'],
    ['H=|(', 'ᾟ'],
    ['H=(|', 'ᾟ'],
    ['w|)\\', 'ᾢ'],
    ['w|\\)', 'ᾢ'],
    ['w)|\\', 'ᾢ'],
    ['w)\\|', 'ᾢ'],
    ['w\\|)', 'ᾢ'],
    ['w\\)|', 'ᾢ'],
    ['w|(\\', 'ᾣ'],
    ['w|\\(', 'ᾣ'],
    ['w(|\\', 'ᾣ'],
    ['w(\\|', 'ᾣ'],
    ['w\\|(', 'ᾣ'],
    ['w\\(|', 'ᾣ'],
    ['w|)/', 'ᾤ'],
    ['w|/)', 'ᾤ'],
    ['w)|/', 'ᾤ'],
    ['w)/|', 'ᾤ'],
    ['w/|)', 'ᾤ'],
    ['w/)|', 'ᾤ'],
    ['w|(/', 'ᾥ'],
    ['w|/(', 'ᾥ'],
    ['w(|/', 'ᾥ'],
    ['w(/|', 'ᾥ'],
    ['w/|(', 'ᾥ'],
    ['w/(|', 'ᾥ'],
    ['w|)=', 'ᾦ'],
    ['w|=)', 'ᾦ'],
    ['w)|=', 'ᾦ'],
    ['w)=|', 'ᾦ'],
    ['w=|)', 'ᾦ'],
    ['w=)|', 'ᾦ'],
    ['w|(=', 'ᾧ'],
    ['w|=(', 'ᾧ'],
    ['w(|=', 'ᾧ'],
    ['w(=|', 'ᾧ'],
    ['w=|(', 'ᾧ'],
    ['w=(|', 'ᾧ'],
    ['W|)\\', 'ᾪ'],
    ['W|\\)', 'ᾪ'],
    ['W)|\\', 'ᾪ'],
    ['W)\\|', 'ᾪ'],
    ['W\\|)', 'ᾪ'],
    ['W\\)|', 'ᾪ'],
    ['W|(\\', 'ᾫ'],
    ['W|\\(', 'ᾫ'],
    ['W(|\\', 'ᾫ'],
    ['W(\\|', 'ᾫ'],
    ['W\\|(', 'ᾫ'],
    ['W\\(|', 'ᾫ'],
    ['W|)/', 'ᾬ'],
    ['W|/)', 'ᾬ'],
    ['W)|/', 'ᾬ'],
    ['W)/|', 'ᾬ'],
    ['W/|)', 'ᾬ'],
    ['W/)|', 'ᾬ'],
    ['W|(/', 'ᾭ'],
    ['W|/(', 'ᾭ'],
    ['W(|/', 'ᾭ'],
    ['W(/|', 'ᾭ'],
    ['W/|(', 'ᾭ'],
    ['W/(|', 'ᾭ'],
    ['W|)=', 'ᾮ'],
    ['W|=)', 'ᾮ'],
    ['W)|=', 'ᾮ'],
    ['W)=|', 'ᾮ'],
    ['W=|)', 'ᾮ'],
    ['W=)|', 'ᾮ'],
    ['W|(=', 'ᾯ'],
    ['W|=(', 'ᾯ'],
    ['W(|=', 'ᾯ'],
    ['W(=|', 'ᾯ'],
    ['W=|(', 'ᾯ'],
    ['W=(|', 'ᾯ'],
    ['a)\\', 'ἂ'],
    ['a\\)', 'ἂ'],
    ['a(\\', 'ἃ'],
    ['a\\(', 'ἃ'],
    ['a)/', 'ἄ'],
    ['a/)', 'ἄ'],
    ['a(/', 'ἅ'],
    ['a/(', 'ἅ'],
    ['a)=', 'ἆ'],
    ['a=)', 'ἆ'],
    ['a(=', 'ἇ'],
    ['a=(', 'ἇ'],
    ['A)\\', 'Ἂ'],
    ['A\\)', 'Ἂ'],
    ['A(\\', 'Ἃ'],
    ['A\\(', 'Ἃ'],
    ['A)/', 'Ἄ'],
    ['A/)', 'Ἄ'],
    ['A(/', 'Ἅ'],
    ['A/(', 'Ἅ'],
    ['A)=', 'Ἆ'],
    ['A=)', 'Ἆ'],
    ['A(=', 'Ἇ'],
    ['A=(', 'Ἇ'],
    ['e)\\', 'ἒ'],
    ['e\\)', 'ἒ'],
    ['e(\\', 'ἓ'],
    ['e\\(', 'ἓ'],
    ['e)/', 'ἔ'],
    ['e/)', 'ἔ'],
    ['e(/', 'ἕ'],
    ['e/(', 'ἕ'],
    ['E)\\', 'Ἒ'],
    ['E\\)', 'Ἒ'],
    ['E(\\', 'Ἓ'],
    ['E\\(', 'Ἓ'],
    ['E)/', 'Ἔ'],
    ['E/)', 'Ἔ'],
    ['E(/', 'Ἕ'],
    ['E/(', 'Ἕ'],
    ['h)\\', 'ἢ'],
    ['h\\)', 'ἢ'],
    ['h(\\', 'ἣ'],
    ['h\\(', 'ἣ'],
    ['h)/', 'ἤ'],
    ['h/)', 'ἤ'],
    ['h(/', 'ἥ'],
    ['h/(', 'ἥ'],
    ['h)=', 'ἦ'],
    ['h=)', 'ἦ'],
    ['h(=', 'ἧ'],
    ['h=(', 'ἧ'],
    ['H)\\', 'Ἣ'],
    ['H\\)', 'Ἣ'],
    ['H(\\', 'Ἤ'],
    ['H\\(', 'Ἤ'],
    ['H)/', 'Ἥ'],
    ['H/)', 'Ἥ'],
    ['H(/', 'Ἦ'],
    ['H/(', 'Ἦ'],
    ['H)=', 'Ἧ'],
    ['H=)', 'Ἧ'],
    ['H(=', 'Η'],
    ['H=(', 'Η'],
    ['i)\\', 'ἲ'],
    ['i\\)', 'ἲ'],
    ['i(\\', 'ἳ'],
    ['i\\(', 'ἳ'],
    ['i)/', 'ἴ'],
    ['i/)', 'ἴ'],
    ['i(/', 'ἵ'],
    ['i/(', 'ἵ'],
    ['i)=', 'ἶ'],
    ['i=)', 'ἶ'],
    ['i(=', 'ἷ'],
    ['i=(', 'ἷ'],
    ['I)\\', 'Ἲ'],
    ['I\\)', 'Ἲ'],
    ['I(\\', 'Ἳ'],
    ['I\\(', 'Ἳ'],
    ['I)/', 'Ἴ'],
    ['I/)', 'Ἴ'],
    ['I(/', 'Ἵ'],
    ['I/(', 'Ἵ'],
    ['I)=', 'Ἶ'],
    ['I=)', 'Ἶ'],
    ['I(=', 'Ἷ'],
    ['I=(', 'Ἷ'],
    ['o)\\', 'ὂ'],
    ['o\\)', 'ὂ'],
    ['o(\\', 'ὃ'],
    ['o\\(', 'ὃ'],
    ['o)/', 'ὄ'],
    ['o/)', 'ὄ'],
    ['o(/', 'ὅ'],
    ['o/(', 'ὅ'],
    ['O)\\', 'Ὂ'],
    ['O\\)', 'Ὂ'],
    ['O(\\', 'Ὃ'],
    ['O\\(', 'Ὃ'],
    ['O)/', 'Ὄ'],
    ['O/)', 'Ὄ'],
    ['O(/', 'Ὅ'],
    ['O/(', 'Ὅ'],
    ['u)\\', 'ὒ'],
    ['u\\)', 'ὒ'],
    ['u(\\', 'Ὓ'],
    ['u\\(', 'Ὓ'],
    ['u)/', 'ὔ'],
    ['u/)', 'ὔ'],
    ['u(/', 'Ὕ'],
    ['u/(', 'Ὕ'],
    ['u)=', 'ὖ'],
    ['u=)', 'ὖ'],
    ['u(=', 'Ὗ'],
    ['u=(', 'Ὗ'],
    ['w)\\', 'ὢ'],
    ['w\\)', 'ὢ'],
    ['w(\\', 'ὣ'],
    ['w\\(', 'ὣ'],
    ['w)/', 'ὤ'],
    ['w/)', 'ὤ'],
    ['w(/', 'ὥ'],
    ['w/(', 'ὥ'],
    ['w)=', 'ὦ'],
    ['w=)', 'ὦ'],
    ['w(=', 'ὧ'],
    ['w=(', 'ὧ'],
    ['W)\\', 'Ὢ'],
    ['W\\)', 'Ὢ'],
    ['W(\\', 'Ὣ'],
    ['W\\(', 'Ὣ'],
    ['W)/', 'Ὤ'],
    ['W/)', 'Ὤ'],
    ['W(/', 'Ὥ'],
    ['W/(', 'Ὥ'],
    ['W)=', 'Ὦ'],
    ['W=)', 'Ὦ'],
    ['W(=', 'Ὧ'],
    ['W=(', 'Ὧ'],
    ['a|)', 'ᾀ'],
    ['a)|', 'ᾀ'],
    ['a|(', 'ᾁ'],
    ['a(|', 'ᾁ'],
    ['A|(', 'ᾈ'],
    ['A(|', 'ᾈ'],
    ['A|)', 'ᾉ'],
    ['A)|', 'ᾉ'],
    ['h|)', 'ᾐ'],
    ['h)|', 'ᾐ'],
    ['h|(', 'ᾑ'],
    ['h(|', 'ᾑ'],
    ['H|(', 'ᾘ'],
    ['H(|', 'ᾘ'],
    ['H|)', 'ᾙ'],
    ['H)|', 'ᾙ'],
    ['w|)', 'ᾠ'],
    ['w)|', 'ᾠ'],
    ['w|(', 'ᾡ'],
    ['w(|', 'ᾡ'],
    ['W|)', 'ᾨ'],
    ['W)|', 'ᾨ'],
    ['W|(', 'ᾩ'],
    ['W(|', 'ᾩ'],
    ['a\\|', 'ᾲ'],
    ['a|\\', 'ᾲ'],
    ['a/|', 'ᾴ'],
    ['a|/', 'ᾴ'],
    ['a=|', 'ᾷ'],
    ['a|=', 'ᾷ'],
    ['h|\\', 'ῂ'],
    ['h\\|', 'ῂ'],
    ['h|/', 'ῄ'],
    ['h/|', 'ῄ'],
    ['h|=', 'ῇ'],
    ['h=|', 'ῇ'],
    ['i\\+', 'ῒ'],
    ['i+\\', 'ῒ'],
    ['i/+', 'ΐ'],
    ['i+/', 'ΐ'],
    ['i=+', 'ῗ'],
    ['i+=', 'ῗ'],
    ['u\\+', 'ῢ'],
    ['u+\\', 'ῢ'],
    ['u/+', 'ΰ'],
    ['u+/', 'ΰ'],
    ['u=+', 'ῧ'],
    ['u+=', 'ῧ'],
    ['w|\\', 'ῲ'],
    ['w\\|', 'ῲ'],
    ['w|/', 'ῴ'],
    ['w/|', 'ῴ'],
    ['w|=', 'ῷ'],
    ['w=|', 'ῷ'],
    ['a)', 'ἀ'],
    ['a(', 'ἁ'],
    ['A)', 'Ἀ'],
    ['A(', 'Ἁ'],
    ['e)', 'ἐ'],
    ['e(', 'ἑ'],
    ['E)', 'Ἐ'],
    ['E(', 'Ἑ'],
    ['h)', 'ἠ'],
    ['h(', 'ἡ'],
    ['H)', 'Ἡ'],
    ['H(', 'Ἢ'],
    ['i)', 'ἰ'],
    ['i(', 'ἱ'],
    ['I)', 'Ἰ'],
    ['I(', 'Ἱ'],
    ['o)', 'ὀ'],
    ['o(', 'ὁ'],
    ['O)', 'Ὀ'],
    ['O(', 'Ὁ'],
    ['u)', 'ὐ'],
    ['u(', 'Ὑ'],
    ['w)', 'ὠ'],
    ['w(', 'ὡ'],
    ['W)', 'Ὠ'],
    ['W(', 'Ὡ'],
    ['a\\', 'ὰ'],
    ['a/', 'ά'],
    ['e\\', 'ὲ'],
    ['e/', 'έ'],
    ['h\\', 'ὴ'],
    ['h/', 'ή'],
    ['i\\', 'ὶ'],
    ['i/', 'ί'],
    ['o\\', 'ὸ'],
    ['o/', 'ό'],
    ['u\\', 'ὺ'],
    ['u/', 'ύ'],
    ['w\\', 'ὼ'],
    ['w/', 'ώ'],
    ['a-', 'ᾰ'],
    ['a_', 'ᾱ'],
    ['a|', 'ᾳ'],
    ['a=', 'ᾶ'],
    ['A-', 'Ᾰ'],
    ['A_', 'Ᾱ'],
    ['A\\', 'Ὰ'],
    ['A/', 'Ά'],
    ['A|', 'ᾼ'],
    ['h|', 'ῃ'],
    ['h=', 'ῆ'],
    ['E\\', 'Ὲ'],
    ['E/', 'Έ'],
    ['H\\', 'Ὴ'],
    ['H/', 'Ή'],
    ['H|', 'ῌ'],
    ['i-', 'ῐ'],
    ['i_', 'ῑ'],
    ['i=', 'ῖ'],
    ['I-', 'Ῐ'],
    ['I_', 'Ῑ'],
    ['I\\', 'Ὶ'],
    ['I/', 'Ί'],
    ['r)', 'ῤ'],
    ['r(', 'ῥ'],
    ['R(', 'Ῥ'],
    ['u-', 'ῠ'],
    ['u_', 'ῡ'],
    ['u=', 'ῦ'],
    ['U-', 'Ῠ'],
    ['U_', 'Ῡ'],
    ['U\\', 'Ὺ'],
    ['U/', 'Ύ'],
    ['O\\', 'Ὸ'],
    ['O/', 'Ό'],
    ['w|', 'ῳ'],
    ['w=', 'ῶ'],
    ['W\\', 'Ὼ'],
    ['W/', 'Ώ'],
    ['W|', 'ῼ'],
    ['I+', 'Ϊ'],
    ['Y+', 'Ϋ'],
    ['i+', 'ϊ'],
    ['u+', 'ϋ'],
    ['s ', 'ς '],
    ['s\n', 'ς\n'],
    ['s.', 'ς.'],
    ['s,', 'ς,'],
    ['s?', 'ς;'],
    ['s;', 'ς·'],
    ['a', 'α'],
    ['A', 'Α'],
    ['e', 'ε'],
    ['E', 'Ε'],
    ['h', 'η'],
    ['H', 'Ἠ'],
    ['i', 'ι'],
    ['I', 'Ι'],
    ['o', 'ο'],
    ['O', 'Ο'],
    ['u', 'υ'],
    ['U', 'Υ'],
    ['w', 'ω'],
    ['W', 'Ω'],
    ['B', 'Β'],
    ['G', 'Γ'],
    ['D', 'Δ'],
    ['Z', 'Ζ'],
    ['Q', 'Θ'],
    ['K', 'Κ'],
    ['L', 'Λ'],
    ['M', 'Μ'],
    ['N', 'Ν'],
    ['C', 'Ξ'],
    ['P', 'Π'],
    ['R', 'Ρ'],
    ['S', 'Σ'],
    ['T', 'Τ'],
    ['F', 'Φ'],
    ['X', 'Χ'],
    ['Y', 'Ψ'],
    ['b', 'β'],
    ['g', 'γ'],
    ['d', 'δ'],
    ['z', 'ζ'],
    ['q', 'θ'],
    ['k', 'κ'],
    ['l', 'λ'],
    ['m', 'μ'],
    ['n', 'ν'],
    ['c', 'ξ'],
    ['p', 'π'],
    ['r', 'ρ'],
    ['s', 'σ'],
    ['t', 'τ'],
    ['f', 'φ'],
    ['x', 'χ'],
    ['y', 'ψ'],
    ['V', 'Ϝ'],
    ['v', 'ϝ'],
    ['?', ';'],
    [';', '·'],
  ];
  // Trailing whitespace: ensures that sigma is still converted even if it is
  // the last character in the whole text.
  text = text + ' ';
  for (let [from, to] of greekConversions) {
    text = text.replaceAll(from, to);
  }
  return text.trim();
}
